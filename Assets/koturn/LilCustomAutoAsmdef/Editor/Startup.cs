using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEditor;


namespace Koturn.Test.Editor
{
    /// <summary>
    /// Startup method provider.
    /// </summary>
    internal sealed class Startup : AssetPostprocessor
    {
#if UNITY_2021_2_OR_NEWER
        /// <summary>
        /// This is called after importing of any number of assets is complete.
        /// </summary>
        /// <param name="importedAssets">Array of paths to imported assets.</param>
        /// <param name="deletedAssets">Array of paths to deleted assets.</param>
        /// <param name="movedAssets">Array of paths to moved assets.</param>
        /// <param name="movedFromAssetPaths">Array of original paths for moved assets.</param>
        /// <param name="didDomainReload">Boolean set to true if there has been a domain reload.</param>
        /// <remarks>
        /// <seealso href="https://docs.unity3d.com/2022.3/Documentation/ScriptReference/AssetPostprocessor.OnPostprocessAllAssets.html"/>
        /// </remarks>
        private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths, bool didDomainReload)
#else
        /// <summary>
        /// This is called after importing of any number of assets is complete.
        /// </summary>
        /// <param name="importedAssets">Array of paths to imported assets.</param>
        /// <param name="deletedAssets">Array of paths to deleted assets.</param>
        /// <param name="movedAssets">Array of paths to moved assets.</param>
        /// <param name="movedFromAssetPaths">Array of original paths for moved assets.</param>
        /// <remarks>
        /// <seealso href="https://docs.unity3d.com/2019.4/Documentation/ScriptReference/AssetPostprocessor.OnPostprocessAllAssets.html"/>
        /// </remarks>
        private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
#endif  // UNITY_2021_2_OR_NEWER
        {
            GenerateAssemblyDefinitionFileForLilCustomShaders(false);
        }

        /// <summary>
        /// If there is no asmdef file in the Editor directory of lilToon's custom shader, create one.
        /// </summary>
        [MenuItem("Assets/koturn/Generate Assembly Definition for custom shader of lilToon", false, 9000)]
        private static void GenerateAssemblyDefinitionFileForLilCustomShaders()
        {
            GenerateAssemblyDefinitionFileForLilCustomShaders(true);
        }

        /// <summary>
        /// If there is no asmdef file in the Editor directory of lilToon's custom shader, create one.
        /// </summary>
        /// <param name="doImport">A flag whether re-import Editor directory after creating Assembly Definition file.</param>
        private static void GenerateAssemblyDefinitionFileForLilCustomShaders(bool doImport)
        {
            const string searchPattern = "lilCustomShaderProperties";
            const string augoGeneratedAsmdefSuffix = "-autogenerated.asmdef";

            foreach (var guid in AssetDatabase.FindAssets("t:DefaultAsset " + searchPattern))
            {
                var assetPath = AssetDatabase.GUIDToAssetPath(guid);
                if (Path.GetFileName(assetPath) != searchPattern + ".lilblock")
                {
                    continue;
                }

                var editorDir = Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(assetPath)), "Editor").Replace('\\', '/');
                var asmdefFilePaths = Directory.GetFiles(editorDir, "*.asmdef");
                if (asmdefFilePaths.Length > 0)
                {
                    if (asmdefFilePaths.Length > 1)
                    {
                        foreach (var asmdefFilePath in asmdefFilePaths)
                        {
                            if (asmdefFilePath.EndsWith(augoGeneratedAsmdefSuffix))
                            {
                                Debug.LogFormat("Delete auto generated Assembly Definition file: {0}", asmdefFilePath);
                                AssetDatabase.DeleteAsset(asmdefFilePath);
                            }
                        }
                    }
                    continue;
                }

                var asmName = ConvertAssetPathToAssemblyName(editorDir);
                var asmDefFilePath = Path.Combine(editorDir, asmName + augoGeneratedAsmdefSuffix);
                WriteAssemblyDefinitionFile(asmDefFilePath, asmName);

                Debug.LogFormat("Generated: {0}", asmDefFilePath);

                if (doImport)
                {
                    AssetDatabase.ImportAsset(editorDir, ImportAssetOptions.ImportRecursive);
                }
            }
        }

        /// <summary>
        /// Create assembly name from asset path of directory.
        /// </summary>
        /// <param name="assetDirPath">Asset path of directory.</param>
        /// <returns>Assembly name.</returns>
        private static string ConvertAssetPathToAssemblyName(string assetDirPath)
        {
            var sb = new StringBuilder();
            var partCount = 0;
            foreach (var part in Regex.Replace(assetDirPath, @"(?:\\|\/)", ".").Split('.'))
            {
                if (partCount == 0 && (part == "Assets" || part == "Packages"))
                {
                    continue;
                }

                unsafe
                {
                    fixed (char* p = part)
                    {
                        if (char.IsLower(*p))
                        {
                            *p = char.ToUpper(*p);
                        }
                    }
                }
                if (partCount > 0)
                {
                    sb.Append('.');
                }
                sb.Append(part);

                partCount++;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Create assembly definition file for custom shader of lilToon.
        /// </summary>
        /// <param name="asmDefFilePath">Assembly definition file path.</param>
        /// <param name="asmName">Assembly name.</param>
        private static void WriteAssemblyDefinitionFile(string asmDefFilePath, string asmName)
        {
            using (var fs = new FileStream(asmDefFilePath, FileMode.Create, FileAccess.Write, FileShare.Read, 512))
            using (var sw = new StreamWriter(fs))
            {
                sw.WriteLine("{");
                sw.WriteLine("    \"name\": \"{0}\",", asmName);
                sw.WriteLine();
                sw.WriteLine("    \"rootNamespace\": \"{0}\",", asmName);
                sw.WriteLine("    \"references\": [");
                sw.WriteLine("        \"lilToon.Editor\"");
                sw.WriteLine("    ],");
                sw.WriteLine("    \"includePlatforms\": [");
                sw.WriteLine("        \"Editor\"");
                sw.WriteLine("    ],");
                sw.WriteLine("    \"excludePlatforms\": [],");
                sw.WriteLine("    \"allowUnsafeCode\": false,");
                sw.WriteLine("    \"overrideReferences\": false,");
                sw.WriteLine("    \"precompiledReferences\": [],");
                sw.WriteLine("    \"autoReferenced\": false,");
                sw.WriteLine("    \"defineConstraints\": [],");
                sw.WriteLine("    \"versionDefines\": [],");
                sw.WriteLine("    \"noEngineReferences\": false");
                sw.Write("}");
            }
        }
    }
}
